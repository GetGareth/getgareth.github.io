<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gareth - Continuous Validation</title>
    <description>Hello world, please meet Gareth. He can be seriously unpleasant. Trust me, we know. But he is becoming more and more indispensable. He will tell you clearly, without emotions, when your ideas are rubbish. He will certainly not hold back and he will give you the facts when your assumptions don’t hold up. He will keep validating that your business goals are reached. If not, he’ll let you know.</description>
    <link>http://getgareth.io//getgareth.github.io/</link>
    <atom:link href="http://getgareth.io//getgareth.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 24 Nov 2016 14:15:12 +0100</pubDate>
    <lastBuildDate>Thu, 24 Nov 2016 14:15:12 +0100</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Some New Cool  Features</title>
        <description>&lt;p&gt;About regex, matching glue lines, dashboards and specification of duration: During the last &lt;a href=&quot;http://twitter.com/codecentric_nl&quot; target=&quot;_blank&quot;&gt;@codecentric_nl&lt;/a&gt; DevThursday we had the chance to add some great new functionality to the Gareth framework. From now on you will be able to use regular expressions (and re-use code for different experiments) and we made it easier and more flexible to specify the duration of experiments.&lt;/p&gt;

&lt;h1 id=&quot;matching-glue-lines-to-definition-methods&quot;&gt;Matching glue lines to definition methods&lt;/h1&gt;

&lt;p&gt;Your baselines, assumptions, success and failure definitions need to correspond to Java methods that do the actual work.
These Java methods reside in so-called definition classes that are known to Gareth through configuration, and the relevant methods are identified through the @Baseline, @Assume, @Time, @Success and @Failure annotations. In its simplest form, it looks like this:&lt;/p&gt;

&lt;p&gt;Baseline: sale of anvils&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@Baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glueLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sale of anvils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSaleOfAnvils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Getting sale of anvils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or with using the built-in Storage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@Baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glueLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sale of anvils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSaleOfAnvils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCurrentSalesOfProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;anvil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A shortcoming of this approach is that there is a strict one-to-one mapping between glue line and definition method. If you want to get the sale of hammers or screwdrivers in a different experiment you’d need to write new methods for each with probably very similar code. That hardly seems efficient. It would be much better if we could make our method configurable by adding the product as a parameter:
public void getSaleByProductCode(final String productCode){…}&lt;/p&gt;

&lt;p&gt;Then we can indicate the configurable part in the glue line by means of a grouped regular expression, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@Baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glueLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sale of (.*?)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSaleOfProductByCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCurrentSalesOfProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Multiple groupings are allowed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glueLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;order (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d{1,3}) (.*?) from (.*?)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendTreats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Enjoy the %d %s from %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this lets you re-use the same Java code for very different glue lines:
Success: order 3 carrot cakes from local bakery
Success: order 5 iPhones from Amazon&lt;/p&gt;

&lt;p&gt;It’s a powerful mechanism, but there are some rules to the game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The number of parenthesised regex groups must be exactly equal to the number of parameters in the method, ignoring the optional Storage parameter, which always comes first and is injected by Gareth when specified. The values are then extracted from the glueline and the definition method is called with these parameters:
“order 3 carrot cakes from local bakery” matches on 3, “carrot cakes” and “local bakery” and calls sendTreats(3,”carrot cakes”,”local bakery”)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Permitted arguments types are String, Integer, Long, Double and their corresponding primitive types. Use of other types in definition methods will cause an error. Gareth must be able to convert parse the regex matches (always String) to a valid Java type.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;specifying-duration&quot;&gt;Specifying duration&lt;/h1&gt;
&lt;p&gt;The regex mechanism as described above is not available for the Time glue line, meaning that the @Time annotated definition method cannot be configured with arguments. However, you may leave it out entirely if your Time glue line follows the pattern of [number] [duration], where duration is one of second, minute, hour, day, week, month, year, or their corresponding plurals:
* Time: 48 hours
* Time: 3 weeks
* Time: 42 days
* Time: 1 month
* Time: 1 year&lt;/p&gt;

&lt;p&gt;Note that month is always 30 days and year is 365 days. Running the experiment with 1 month duration on the 1st of February will check the assumption on the 3rd of March, ignoring leap years. If you want specific behaviour you can still write your own implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tuesday&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Easter&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glueLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tuesday after next Easter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h1&gt;
&lt;p&gt;Also we upgraded the dashboard quite a bit so there is a quick overview of running experiments and the amount of failing/succeeding:
&lt;img src=&quot;/getgareth.github.io/images/blogpics/pie.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And for a more detailed view of the experiments:
&lt;img src=&quot;/getgareth.github.io/images/blogpics/list.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you like it or do you need some help with setting Gareth up? Do you want to contribute in any way? Please let us know!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2016/04/12/some-new-cool-features.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2016/04/12/some-new-cool-features.html</guid>
        
        
      </item>
    
      <item>
        <title>Impact Mapping And Continuous Validation</title>
        <description>&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/impact.jpg&quot; class=&quot;fit image&quot; /&gt;
There is always a reason for making software. Let’s rephrase that: there should always be a reason, at least from a business perspective. How else could our products have any impact?&lt;/p&gt;

&lt;p&gt;Whether we want to make an app that that seamlessly connects riders to drivers or build a community where you can hire and rent apartments while earning tons of money: it is basically all about adding value and solving problems from a software point of view.&lt;/p&gt;

&lt;h2&gt;Impact Mapping&lt;/h2&gt;
&lt;p&gt;Impact mapping is a technique that can be helpful in defining the impact you want your product to have with all that follows. Why are we doing this? You first define the desired impact with some criteria that you consider necessary to make this impact. These criteria stand for the how and the what.&lt;/p&gt;

&lt;p&gt;The example below from by impactmapping.com illustrates how impact mapping works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/im_example.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We want to reach 1 million players on our platform.&lt;/li&gt;
  &lt;li&gt;We think that there are three personas that can help us with that: players, internal employees and advertisers.&lt;/li&gt;
  &lt;li&gt;We think we know how they can help us with that&lt;/li&gt;
  &lt;li&gt;We think we know what will facilitate them on our platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The impact map cheat sheet made by &lt;a href=&quot;http://craigsmith.id.au/&quot;&gt;Craig Smith&lt;/a&gt; can be a helpful aid to keep everybody focused while doing the impact mapping:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/impact-map-cheat-sheet.jpg&quot; class=&quot;lean-image-left&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/assumptions.png&quot; class=&quot;fit image&quot; /&gt;
With impact mapping we make a lot of assumptions. In the example below we assume that the actor called Player can help us in making the desired impact (1 million users). We also assume that Player will do this by inviting friends, and we make the assumption that semi-automatic invites will help.&lt;/p&gt;

&lt;h2&gt;Following up on your stories&lt;/h2&gt;
&lt;p&gt;The thing I don’t see happening often is following up on the impact of a piece of functionality. We have a review or demo and sometimes we get feedback from users. Yet apart from some performance monitoring we do not really know a lot about the impact we are making. Did we make valid assumptions?&lt;/p&gt;

&lt;h2&gt;Continuous validation&lt;/h2&gt;
&lt;p&gt;With continuous validation we also make many assumptions. In contrast to automatic unit tests we want to keep validating the same assumptions in production as long as the functionality is alive, and not run it only once. It is very common that the impact of one feature is diminished by a newer one. To create great projects this is something you really want to know and should act on.&lt;/p&gt;

&lt;p&gt;We introduce validation as an extra dimension to a user story. We call this an experiment. These experiments will run scheduled in production as long as the functionality is there. The experiment for the example above could be:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experiment:&lt;/strong&gt; By giving players the option to invite friends semi-automatically the number of players will increase.&lt;br /&gt;
&lt;strong&gt;Baseline:&lt;/strong&gt; Get the current amount players.&lt;br /&gt;
&lt;strong&gt;Assume:&lt;/strong&gt; There will be a 10% increase in new players.&lt;br /&gt;
&lt;strong&gt;Time:&lt;/strong&gt; 1 month.&lt;br /&gt;
&lt;strong&gt;Success:&lt;/strong&gt; Send cake to the whole team with congratulations.&lt;br /&gt;
&lt;strong&gt;Failure:&lt;/strong&gt; Push message to Product Owner.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Other things I would like to know and want to create experiments for is how much the invite option is being used, who uses it, and what the assumed effect is after 6 months?&lt;/p&gt;

&lt;h2&gt;Impact mapping and continuous validation&lt;/h2&gt;

&lt;p&gt;In a sense continuous validation is the automation of impact mapping. Where impact mapping is a great way to define products, continuous validation makes sure your assumptions are being validated. Not once, but as long as the functionality is alive.&lt;/p&gt;

&lt;p&gt;Creating great products is not only about adding new cool features. It is also about removing or changing existing features whose goals aren’t met. We know which impact we want to have. Are we in any way achieving this goal? Are our assumptions right? Is there functionality that is not contributing to our goal?&lt;/p&gt;

&lt;p&gt;Manual monitoring of all the assumptions that were made is undoable most of the times. Working software must be delivered at an ever faster pace. That’s why after continuous integration there is continuous validation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/hylke1982&quot;&gt;Hylke staperma&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/NielsTalens&quot;&gt;myself&lt;/a&gt; are currently working on a continuous validation framework called Gareth &lt;a href=&quot;http://www.getgareth.io&quot;&gt;getgareth.io&lt;/a&gt; It is an open source project and we would really like to hear from you if you are interested in contributing, trying Gareth out or just discuss it. Fork us on &lt;a href=&quot;https://github.com/craftsmenlabs&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;More on:&lt;/h2&gt;
&lt;p&gt;Impact mapping:
&lt;a href=&quot;www.impactmapping.org&quot;&gt;www.impactmapping.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuous validation:
&lt;a href=&quot;http://craftsmenlabs.github.io/gareth/2015/08/15/After-continuous-integration-there-is-continuous-validation.html&quot;&gt;After continuous integration there is continuous validation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2015/11/16/Impact-mapping-and-continuous-validation.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2015/11/16/Impact-mapping-and-continuous-validation.html</guid>
        
        
      </item>
    
      <item>
        <title>Meet Gareth. He Is Seriously Unpleasant</title>
        <description>&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/screenshot-gareth.jpg&quot; class=&quot;fit image&quot; /&gt;
Hello world, please meet Gareth. He can be seriously unpleasant. Trust me, we know. But he is becoming more and more indispensable. He will tell you clearly, without emotions, when your ideas are rubbish. He will certainly not hold back and he will give you the facts when your assumptions don’t hold up. He will keep validating that your business goals are reached. If not, he’ll let you know.&lt;/p&gt;

&lt;p&gt;Gareth validates the Why, the reason certain functionality was built in the first place. He makes sure that the (business) goals are reached and keeps validating these goals. We all know that implementing one feature can affect another. This also has an impact on the success of the related goals.&lt;/p&gt;

&lt;p&gt;Gareth loves business goals. He doesn’t want to talk about functionality. He wants clear assumptions like: the performance of feature x will be 25% better after implementing this change; feature y will decrease the usage of functionality z by at least 50% over the next 3 months, and so on.&lt;/p&gt;

&lt;h2&gt;Why we really need Gareth&lt;/h2&gt;
&lt;p&gt;There is a lot of focus on software craftsmanship and automation. We can build and deploy software very quickly with current technologies. However, it’s the post-deployment stage that worries us. How can we be sure that this new functionality has the impact the business needs?&lt;/p&gt;

&lt;p&gt;We believe user stories and backlogs are too detailed and complex as an aid to communicating with stakeholders. We think it would be better to talk with them about goals and assumptions. What are the goals and how do we want to validate them?&lt;/p&gt;

&lt;p&gt;We know the world changes, and so must our software. That’s another reason we need Gareth. It’s vital to know that your goals are still reached after changing parts of the software. Sometimes one feature makes another unneeded. If so, Gareth will let you know.&lt;/p&gt;

&lt;h3&gt;How Gareth works&lt;/h3&gt;
&lt;p&gt;We introduce validation as an extra dimension to an user story. We call it an experiment and it consists of:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experiment:&lt;/strong&gt; Name of the experiment&lt;br /&gt;
&lt;strong&gt;Baseline:&lt;/strong&gt; What is the initial state.&lt;br /&gt;
&lt;strong&gt;Assume:&lt;/strong&gt; Which impact do we hope/wish the software is going to have?&lt;br /&gt;
&lt;strong&gt;Time:&lt;/strong&gt; What is the interval and period of the experiment?&lt;br /&gt;
&lt;strong&gt;Action:&lt;/strong&gt; Which action does Gareth have to take when an experiment fails/succeeds?&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Let’s describe an example:&lt;/h3&gt;

&lt;h4&gt;The story:&lt;/h4&gt;
&lt;p&gt;As the owner of the hotel booking site,&lt;br /&gt;
I want the users to see the rooms with discount first,&lt;br /&gt;
So that they will be booked first.&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;The experiment could be:&lt;/h4&gt;
&lt;p&gt;Experiment: I want to validate that by showing the discounted rooms first, there will be an increase in booked rooms.&lt;/p&gt;

&lt;p&gt;Baseline: Get the current number of discounted rooms booked per week.&lt;br /&gt;
Assume: There will be an increase in bookings for discounted rooms of 25 per week in the first month.&lt;br /&gt;
Time: 1 month.&lt;br /&gt;
Success: Send email to the whole team with congratulations.&lt;br /&gt;
Failure: Send an email to the Product Owner.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Baseline: Get the number of discounted rooms booked in the last 6 months.&lt;br /&gt;
Assume: After 6 months, bookings of discounted rooms have increased by 80%.&lt;br /&gt;
Time: 6 months.&lt;br /&gt;
Success: Send reminder to buy cake for the developers.&lt;br /&gt;
Action: Create an investigative story on the backlog.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Gareth will run these validations as often as described in the assumptions and take the appropriate action. It is a great way for a product owner to be sure the right things are being built and kept that way. This is what we want to communicate to our stakeholders.&lt;/p&gt;

&lt;p&gt;It is also great for teams to see that not only code, but also business goals are validated continuously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/Gareth Schema Business.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Get Gareth&lt;/h2&gt;
&lt;p&gt;Are you interested? Please be our guest and try Gareth. Gareth is open source (GNU General Public License v2.0) so that we all can benefit. Do you want to contribute in any way? Please let us know! We are really looking forward hearing from you.&lt;/p&gt;

&lt;p&gt;Get Gareth: &lt;a href=&quot;https://github.com/craftsmenlabs&quot;&gt;github.com/craftsmenlabs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See Gareth:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/xWvc--BOtHo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Wed, 16 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2015/09/16/Meet-Gareth.-He-is-seriously-unpleasant.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2015/09/16/Meet-Gareth.-He-is-seriously-unpleasant.html</guid>
        
        
      </item>
    
      <item>
        <title>Gareth, Validating Your Business Goals</title>
        <description>&lt;p&gt;Software development evolves at a rapid pace. Continuous delivery is the new black. With software being created and delivered faster than ever, we find that the input lags behind. We build software with a reason, usually to solve an existing problem or deliver more business value. Yet we notice that these reasons are hardly ever validated.&lt;/p&gt;

&lt;p&gt;We need to validate that the software we built still has a reason to exist. That’s why we made Gareth. Gareth clarifies and validates the Why.&lt;/p&gt;

&lt;p&gt;In this blog post we will show you how to use Gareth and make validating your business goals part of your development process. You will see how Gareth validates the entire lifecycle of a business goal, from inception of a user story right into production.&lt;/p&gt;

&lt;h2&gt;Inception&lt;/h2&gt;
&lt;p&gt;User stories are always written for a reason. Say we expect that a relevant FAQ page will reduce the number of customer support calls. This is a clear business goal and with Gareth we can make such goals — the Why — part of the process.&lt;/p&gt;

&lt;p&gt;These business goals should be included in the roadmaps, features and user stories at an early stage, for by doing so these goals will become apparent for the team realizing the software and it also allows for reflection on the usefulness of the desired functionality. These goals, or Why’s, are described in the Gareth DSL. We introduce another dimension to a user story, which we will call an Experiment:&lt;/p&gt;

&lt;h3&gt;The story:&lt;/h3&gt;

&lt;p&gt;As the owner of the hotel booking site,&lt;br /&gt;
I want the users to see the discounted rooms first,&lt;br /&gt;
So that they will be booked first.&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;The experiment could be:&lt;/h3&gt;

&lt;p&gt;Experiment: I want to validate that by showing the discounted rooms first, there will be an increase in booked rooms.&lt;/p&gt;

&lt;p&gt;Baseline: Get the current number of discounted rooms booked.&lt;br /&gt;
Assume: There will be an increase in bookings for discounted rooms of 25 per week.&lt;br /&gt;
Time: 1 week&lt;br /&gt;
Success: Send email to the whole team with congratulations&lt;br /&gt;
Failure: Send an email to the Product Owner.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We kept the language clean and readable to make it easy for a product owner to communicate with his or her stakeholders. Talking the same language throughout the business simplifies things, because a user story can often be interpreted in many different ways.&lt;/p&gt;

&lt;p&gt;With Gareth the product owner describes the goal that should be achieved: the experiment. By setting a baseline (getting the current situation), an assumption (the desired future situation) and a time within which the goal should reached we have all the information needed to validate the goal. The final two parameters are the desired actions taken when an experiment fails or passes.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;A user story now consist of the story, the acceptance criteria and the experiment. This way it becomes clear for the team members what the product owner wants to achieve. The development team is now able to create definitions that can be ‘glued ’ to the experiment:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Hylke1982/ef6c055cc3cecd0c638d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In this example you can see how every line in the experiment description in the Gareth DSL is mapped to methods in the ExperimentDefinition. The doBaseline method executes the code that looks up the number of rooms currently booked and the doAssume code will execute after one week, as defined in the doTime method. After the definition code is glued to the experiments defined by the product owner it is time to run the experiment in production. And to keep it running from there on.&lt;/p&gt;
&lt;h2&gt;Production&lt;/h2&gt;
&lt;p&gt;Bringing your experiment into production means that the experiment described in the Gareth DSL and the experiment definition are brought together. This is the moment that the product owner gets feedback if the user story really makes a difference or is just functionality that interferes with other business goals. The experiment and the experiment can be brought together with the following code.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Hylke1982/c4c0fcea2779093edbf9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;With the ExperimentEngineConfig you can load experiment descriptions and definitions. The ExperimentEngine will load this configuration. Afterwards you can start the engine and your experiment will be validated automatically.&lt;/p&gt;

&lt;h2&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/explain/Cycle 3.png&quot; class=&quot;lean-image-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gareth makes it possible for a product owner to clearly communicate with stakeholders about the business goals and the results of the validation. “Yes we assumed that the effect of this was X but we found out that this assumption was wrong. Let’s find out why and get it right”. It clearly helps the stakeholders and the product owner to define the right functionality and validate these continuously. It is a great way to improve product definitions.&lt;/p&gt;

&lt;p&gt;Gareth also helps software development teams become more aware as to which goals should be achieved when implementing a user story. This has a big impact on the design and functionality of the software.&lt;/p&gt;

&lt;h2&gt;Get Gareth&lt;/h2&gt;
&lt;p&gt;Are you interested? Please be our guest and try Gareth. Gareth is open source (GNU General Public License v2.0) so that we all can benefit. Do you want to contribute in any way? Please let us know! We are really looking forward to hearing from you.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2015/09/15/Gareth,-validating-your-business-goals.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2015/09/15/Gareth,-validating-your-business-goals.html</guid>
        
        
      </item>
    
      <item>
        <title>After Continuous Integration There Is Continuous Validation</title>
        <description>&lt;p&gt;It’s a funny thing to say that delivering business value is the most important thing when developing software. It doesn’t matter that a framework like Scrum is far from efficient, because we focus on value. We deliver business value. Working software. Every sprint. Period.&lt;/p&gt;

&lt;p&gt;But in the end we often just don’t know the impact of the things we make. What do we really know about the business value we supposedly created? Is it a one-time validation? Is it a one-way validation?&lt;/p&gt;

&lt;p&gt;We keep adding stuff to our products because that is what we are expected to do. We always need more features. But do we know the difference these features make, except that there are more features now? More stuff. What if one feature undoes the effect of another? Wouldn’t that be valuable to know? Wouldn’t it be nice to remove it?&lt;/p&gt;

&lt;p&gt;Software development has everything to do with validations. There are at least three rounds of validation from ideas to maintaining the software in a production environment.&lt;/p&gt;

&lt;h2&gt;Validate your ideas and business goals&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/explain/Cycle 1.png&quot; class=&quot;lean-image-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first round of validation is about vision, business goals and problems to solve. Is the vision of the product (still) right? Are the right personas defined? Is the desired impact of the software defined? Are the right activities defined? Are the goals clear? What is the desired ROI?&lt;/p&gt;

&lt;h2&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/explain/Cycle 2.png&quot; class=&quot;lean-image-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second round of validation is about technical and behavioural validation. Features are being designed, built, tested, accepted and deployed.&lt;/p&gt;

&lt;h2&gt;Continuous validation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/explain/Cycle 3.png&quot; class=&quot;lean-image-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hooray! Your software is live!&lt;/strong&gt; Well, let’s NOT sit back and relax. This is usually the moment where we tend to run back to the product backlog and get started on new features. Burn down those points! Move post-its around like there is no tomorrow! Like dropping your children off at school without ever speaking to the teachers.&lt;/p&gt;

&lt;p&gt;Let’s make sure that this is what the world really needs. Let’s also make sure we keep it that way.&lt;/p&gt;

&lt;h3&gt;Proactive monitoring&lt;/h3&gt;
&lt;p&gt;Monitoring is often limited to raising the alarms when something is seriously wrong. With continuous validation you are monitoring something else entirely: you want to know the effects new features or changes have on the system and be able to act on them. Use the feedback you get from your users, that is, from the behaviour of your users. For instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the performance of the most important business transactions? Do the new features affect these? If so, how do they over a period of time?&lt;/li&gt;
  &lt;li&gt;What do heatmaps say about the assumptions you made earlier? Or the usage data? Do the users really use the new feature more than the older one? And what about over a period of time?&lt;/li&gt;
  &lt;li&gt;What do the statistics say about the increase or decrease of a certain feature? Was that the intention?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Validate goals&lt;/h3&gt;
&lt;p&gt;You make your software with a purpose, right? You want to reach business goals or you want to solve problems. But to make sure your software achieves what you intended it to do and keeps doing you need to validate this continuously. If your goal was to sell more items and you implemented functionality to reach this goal, you’ll need to validate its effectiveness. And then you need to keep validating it because software is no concrete structure and will change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/Fence.jpg&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cannot emphasise this enough: remove functionality that doesn’t meet the criteria anymore. The world is full of bloated expanding products which become even bigger and unusable. Like the gate in the picture. I’m sure there was a good reason to make it and it worked very well when there was a fence. For now it only costs us because it needs maintenance.&lt;/p&gt;

&lt;p&gt;Does your product have gates without fences? Are you aware? Not all as visible as the one in the picture I’m sure, but they’ll cost you money just the same.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 +0200</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2015/08/15/After-continuous-integration-there-is-continuous-validation.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2015/08/15/After-continuous-integration-there-is-continuous-validation.html</guid>
        
        
      </item>
    
      <item>
        <title>How Assumptions Are Not The Mother Of All F Ups</title>
        <description>&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/CD-is-the-start-skewd.png&quot; class=&quot;fit image&quot; /&gt;
&lt;em&gt;The thing about trends is that they will come and they will go. So after the agile trend continuous delivery and devops are in line. I think in a way it is very nice to see that development craftsmanship practices are becoming more and more accepted. We can all benefit from this. Software is eating the world so let’s be damn sure that the software is good. But is it?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Be honest. After the development of the first couple of versions. After adding new features for a while. What is the state of the product? Are the same assumptions holding up? Are your goals still the same? Did the world change? Or is it enough that you can deliver your software in a matter of seconds?&lt;/p&gt;

&lt;p&gt;Often we think we are building software like this:
&lt;img src=&quot;/getgareth.github.io/images/blogpics/What-we-think-we-make-700x442.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we are doing this:
&lt;img src=&quot;/getgareth.github.io/images/blogpics/What-we-really-make-700x397.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say we are still building the same crap but at least now we can deliver it faster and with fancier new tools.&lt;/p&gt;

&lt;p&gt;Agile, continuous delivery and devops can make our processes and delivery easier. And we can do that in the cloud, with big data and microservices written in Elixir. But that is still only a part of creating software products. We have to look at software development as a whole again. Because that’s the only thing that really counts: making good products. And that does not only mean bug free or easy to deliver.&lt;/p&gt;

&lt;p&gt;Why continuous delivery isn’t finished&lt;/p&gt;

&lt;p&gt;The prerequisites didn’t change at all. With bad input and lack of validation the results are mediocre at best. It made my colleague Hylke Stapersma &lt;a href=&quot;http://www.twitter.com/hylke1982&quot;&gt;@hylke1982&lt;/a&gt; and me think about why continuous delivery isn’t finished and what we are missing. So we started experimenting with this. In the following blogs we will describe more of the technical journey. For now it’s about the concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Stories that don’t suck:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Good story describes the goal a certain user wants to achieve with a piece of functionality (the why). It should be pretty functional. It works very well to add acceptance criteria (BDD/ATDD scenarios) in an early stage to fine-tune and make sure a functional validation is in place. Let’s say that’s all in order.&lt;/p&gt;

&lt;p&gt;We now want to introduce another dimension to make sure we achieve our goals. We add something we called an experiment, which includes some assumptions, to an user story. These assumptions can be measured and will be automatically validated.&lt;/p&gt;

&lt;p&gt;– And for me it is not about being SMART all the time. I’m definitely more of a DUMB guy. It is more about validating assumptions than the measurement in this case anyway.&lt;/p&gt;

&lt;p&gt;Here is an example of a story we are using in our demo setup which contains both the BDD feature and an experiment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/CD-is-the-start1.png&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2 – 8: Do the magic: build and deliver the best software ever seen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/getgareth.github.io/images/blogpics/CD-is-the-start.jpg&quot; class=&quot;fit image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a more indepth explanation of this model please check this blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9: monitor assumptions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the results of the validation are under expectation, these result should have impact on the backlog. In theory the result of the validation is more valuable than any new feature you were dying to implement. To be honest, the story in which the assumption was made was highly prioritized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So one of the first things we saw is that in contrast to unit or acceptance tests we now have the time dimension. Our behaviour tests run a couple of time in the continuous delivery pipeline but never when the software is in production. There’s no need either because there are no changes there. In the case of the experiment we have a starting point, our baseline, and from there we will schedule a periodic validation of the assumptions we made. We can validate as often as we want. Why ever turn them off?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing features is not a bad thing people.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you find out that something is rarely used please do not be afraid to remove it. That will make your product leaner and your codebase cleaner (there is a song in there). Here validating assumptions can also be very handy. Because we can measure over periods of time we just set a limit and everything below that we have to evaluate. I would like to know if something isn’t as valuable as expected. Often by adding a new feature an older one becomes unnecessary. No problem. Just remove it and try again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Impact mapping.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at impact mapping you see that assumptions are a big part of it. Those are the things we often can make measurable. In our case add them to an experiment and validate. Impact mapping is a great way for us to gain insight in the many assumptions we make. If you don’t know impact mapping I can recommend the book by Gojko Adzic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-functional stories.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A story has to describe something that has value. But sometimes that value is easier to define than the functionality or the user. And what to do with some non-functional stories? I think we all have had experience with user stories that feel artificial. Like we can’t even describe a proper user for it. We just want to decrease the costs of operations with a piece of functionality for instance. Should we describe “ the members of the board” as users? It just feels artificial sometimes. I think in those cases an experiment/assumption could replace the story.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wishlist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the future we want to be able to also use information of tools like AppDynamics or Google Analytics. Those have so much information that will help the business in making good products. Performance and usage are definitely things that are key in that process.&lt;/p&gt;

&lt;p&gt;So, in conclusion, contrary of an earlier blogpost of mine, in this case assumptions are not the mother of all f-ups. Assumptions are a step in completing the whole flow of software development.&lt;/p&gt;

&lt;p&gt;We are currently implementing this idea and will share our findings and solutions in one or more follow-up blogs. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2015 00:00:00 +0200</pubDate>
        <link>http://getgareth.io//getgareth.github.io/2015/07/14/How-assumptions-are-not-the-mother-of-all-f-ups.html</link>
        <guid isPermaLink="true">http://getgareth.io//getgareth.github.io/2015/07/14/How-assumptions-are-not-the-mother-of-all-f-ups.html</guid>
        
        
      </item>
    
  </channel>
</rss>
